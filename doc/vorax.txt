*vorax.txt*   Plugin for working with Oracle databases.
            For vim version 7.x

			       By Alexandru TicÄƒ
		     alexandru.tica email-at-sign gmail.com

                                                        *vorax* *vorax-plugin*

	Contents:
	   What is VoraX .......................... |vorax-whatis|
	   Features ............................... |vorax-features|
	   Architecture ........................... |vorax-architecture|
	   Installation Guide ..................... |vorax-install|
	   Connecting to a database ............... |vorax-connect|
	   Executing statements ................... |vorax-exec|
	   The output window  ..................... |vorax-output|


==============================================================================
WHAT IS VORAX                                                     *vorax-whatis*

VoraX is a minimalist Oracle IDE based on the well known Vim editor. The main
reasons which motivate us to develop this plugin are:

	- the power of Vim editor. When applied to Oracle development or 
	  database administration it brings a lot of efficiency and fun.

	- the need for a cross platform tool. Vim editor is available on many
	  platforms which means you're free to use whatever OS you like.

	- availability as a console IDE. Having a shiny IDE on a slow SSH
	  connection doesn't sound so good, does it? A DBA will be pleased 
	  running VoraX in a console because, usually, is so used running OS 
	  commands, scripts etc. and, of course, the terminal is his best 
	  friend. With VoraX in place you don't need to leave your beloved 
	  console anymore.

	- having an IDE with a very small footprint. VoraX is nothing but a 
	  collection of VimL and Ruby scripts provided as a Vim plugin. We 
	  hope VoraX will consume as less resources as possible.

	- the dream of an improved SqlPLUS environment. I know a lot of guys
	  (including me) who intensively use SqlPLUS, even for complex tasks. 
	  On the other hand its limitations are quite annoying: we want good 
	  code completion, pretty print output and so on. We cannot get rid of 
	  SqlPLUS because we still think it is a great tool but we can make it 
	  better. This is another goal of VoraX.

VoraX stands for Vim ORAcle eXtension. It acts like a wrapper on the SqlPLUS
environment. Every call to the database is made through SqlPLUS but in a
hidden way so that the user is not aware of that. This approach has pros and
cons. From one hand it inherits all those nice SqlPLUS features like explain
plans, column computations and so on, but on the other hand it has to deal
with all the limitations of the SqlPLUS (formatting output, syntax highlight
etc.) To fill this gap is the whole idea of VoraX.

==============================================================================
FEATURES                                                        *vorax-features*

VoraX comes with the following features:

	- Advanced code completion for database object names, columns, aliases
	  and procedure/function parameters;

	- A database objects browser. You may browse tables, views, packages
	  and so on. The options available for every type of object may be
	  extended through custom plugins;

	- Connection profiles. VoraX allows to store various connection
	  strings, including the corresponding passwords. All these passwords
	  are protected using a master password.
	
	- An output window where the results of running various statements are
	  displayed. Within this window logging may be started in order to
	  save everything is output into a file on disk for future inspection.
	
	- Support for editing and compiling PL/SQL modules like packages,
	  types, procedure and functions.

	- Convenient key mappings for: describe object under cursor, execute
	  current statement etc. 
	
	- Pretty print output. You may switch to a vertical columns output or
	  to a compressed format. In a compressed output all columns width are
	  resized according to the length of the contained data.

==============================================================================
ARCHITECTURE                                                *vorax-architecture*

VoraX is based on SqlPLUS to interact with the database. Every statement you
execute using VoraX is actually run by SqlPLUS behind. When VoraX is
initialized a SqlPLUS process is started in background. Then VoraX
communicates with this process by sending commands and grabbing the
corresponding output.

Maintaining this SqlPLUS process is done differently based on the current OS
platform. On *NIX, VoraX communicates with SqlPLUS using PTYs, on Windows
this communication is done with Windows PIPEs.

In order to be able to implement this kind of interaction, VoraX uses Ruby
language. Even we'd like to have a pure VimL implementation that isn't yet
possible. However, we tried to limit developing VoraX features in Ruby as much
as possible and use VimL instead. Nevertheless, parsing html output, writing
and parsing Oracle grammars for code completion and other complex tasks are
still written in Ruby.

==============================================================================
INSTALLATION GUIDE                                               *vorax-install* 

VoraX follows the standard procedure of installing a Vim plugin: uncompress
the vorax archive into $HOME/.vim if you are on a *NIX platform or into
$HOME/vimfiles if you are on Windows. If you want VoraX to be available for
all users then you may consider installing VoraX in your Vim HOME location. 

You may also use Pathogen, vim-addon-manager or other similar addons management
plugins if you want. It's completely up to you!

However, you need to take care of some dependencies VoraX relies on: 

   1. Vim 7.3 or above is required.

   2. Your Vim must have ruby support enabled. In order to check this you may 
      execute :version and look for +ruby. The supported Ruby is 1.8.7. To 
      check this you may run the following command within your Vim editor:
      
      :ruby puts RUBY_VERSION
      
      CREAM configurations are not supported therefore a plain Vim should be 
      used.

   3. Ruby 1.8.7

   4. Rubygems. On Debian systems is as simple as: 
   
      sudo apt-get install rubygems

   5. The following gems:

	- gem install antlr3 -r
	- gem install activesupport -r
	- gem install nokogiri -r

   6. A working Oracle client with SqlPLUS, which has to be available in the 
      environment $PATH variable. The instant client with SqlPLUS should be 
      just fine.

   7. Optionally, if you want to securely store passwords for your Oracle 
      connections then the openssl ruby extension must be available. 
      On Ubuntu/Debian systems you may use the following command to install it: 
      
      sudo apt-get install libopenssl-ruby1.8 

==============================================================================
CONNECTING TO A DATABASE				         *vorax-install* 

The simplest method to connect to a new database is to use the VoraxConnect
command. For example, the following command is used to connect to an imaginary
TESTDB database with SCOTT user:

		       :VoraxConnect scott/tiger@testdb

On a successful connect you'll be welcomed with the usual Oracle SqlPLUS
banner, otherwise the corresponding error will be displayed.

Sometimes you want to organize all these connection strings in some kind of a
repository for further reference. For this kind of functionality VoraX
provides a connection profile window. To activate it just execute:

			  :VoraxProfilesWindowToggle

There's also a default mapping for toggling this window: <Leader>pr. It's easy
to memorize it: "pr" stands for PRofiles.

Of course, at the very beginning, no profiles are configured. To add a new
profile, while you are in this window, you must display the contextual menu by
pressing <Tab>. This key is the default one, but you're free to choose another
one if you don't like it. From this menu you may select the option to create a 
new connection profile and then to enter the following:

	1. A connection string (e.g. scott@testdb).
	2. A category (e.g. Development or Production etc.).
	3. An importance flag. This is used to display this profile with a
	distinct color in order to underline that it's about a powerful user.
	For example, a connection profile with SYS might be a good candidate
	for this kind of flag.

If the provided connection string contains also the password (e.g.
scott/tiger@testdb) then VoraX will automatically figure out that it must
create a secured repository for you. You'll be prompted for a master password
and then all Oracle passwords will be securely stored in this repository.
Thus, you don't need to remember a lot of passwords but just the master one.

Having these profiles configured is quite handy because VoraxConnect
command is aware of them and you can use completion instead of typing the
entire connection string.

VoraxConnect command accepts also a bang (!). When used like this (e.g.
VoraxConnect! scott/tiger@testdb) the SqlPLUS shadow process is recreated.
Without a bang, the same SqlPLUS process is reused. Usually you don't use this
bang version except for:

	1. The SqlPLUS process is unresponsive and must be recreated.
	2. You want to change the current directory seen by SqlPLUS. In this
	case you may change the current folder in Vim and then force a
	reconnect so that the newly created SqlPLUS process to be started
	from the current location.

==============================================================================
EXECUTING STATEMENTS    				            *vorax-exec* 

In SqlPLUS you just write the statement on the SQL> prompt, press ENTER and
you have the results back with the SQL> prompt waiting for you to provide
another statement. In VoraX is a bit different. You don't have an SQL> prompt
but an entire Vim sql buffer where you can write various statements and run
them from there. It's more like in a PL/SQL Developer or Toad SQL window.

Executing SQL statements is allowed just in sql buffers. This is important in
order to avoid any further frustrations or misunderstandings. Don't expect to
have VoraX functionality in the [No Name] buffer or in a python one.

If you want to start executing sql statements right away and need an sql
buffer, VoraX provides a so called "sql scratch buffer". To open a scratch press
<Leader>ss. It's easy: ss stands for "Sql Scratch". Changing this buffer will
not ask you to save its content so it's important to realize that this scratch
is just a playground. If you care about your SQL statements and want them 
stored in a file then you must use a real sql buffer. For example:

			       :e my_script.sql

Being an sql buffer VoraX will work without a problem.

To execute a statement, VoraX provides a standard keymap: <Leader>e. If you
want to easily remember this keymap just think of "exec". Yes, "e" stands for
"exec". Now, you may execute the current statement or the current selection.
In the first case the current statement is assumed to be the one between two
SQL separators. For example, supposing we have the following:

		select * from cat;
		select count(1) from (select * from v$session)
		/
		exec dbms_output.put_line('abc');

and the cursor is located on the second line. When the user press <Leader>e
then VoraX will know that it must execute the current statement and will try
to detect it using a simple algorithm: find the previous SQL separator (in
this case ";"), find the next SQL separator (in this case /) and execute
everything in between. 

However, as I already mentioned, it's also possible to execute a selection.
For example, if we were to come back to the previous sql buffer and want to
execute just "select * from v$session" then we can visually select that part
and press <Leader>e. Only the selected text will be executed. VoraX will also
take care to add the proper SQL separator at the end of the statement.

==============================================================================
THE OUTPUT WINDOW    				                  *vorax-output* 

TBD.

vim:ts=8 sw=8 noexpandtab tw=78 ft=help:
